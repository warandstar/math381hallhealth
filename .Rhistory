library(readxl)
hall_health <- read_excel("MHApptData_Fixed.xlsx", col_types = c("numeric", "date", "date", "numeric", "text", "text", "numeric", "numeric", "text", "numeric", "text", "text"))
setwd("C:/Users/Jong Tai Kim/Desktop/Projects/math381hallhealth")
hall_health <- read_excel("MHApptData_Fixed.xlsx", col_types = c("numeric", "date", "date", "numeric", "text", "text", "numeric", "numeric", "text", "numeric", "text", "text"))
hall_health <- read_excel("MHApptData_Fixed.xlsx", col_types = c("numeric", "date", "date", "numeric", "text", "text", "numeric", "numeric", "text", "numeric", "text", "text"))
warnings()
hall_health_data <- as.matrix(read_excel("MHApptData_Fixed.xlsx", col_types = c("numeric", "date", "date", "numeric", "text", "text", "numeric", "numeric", "text", "numeric", "text", "text")))
View(head(hall_health))
is.data.frame(hall_health)
PT_ID <- hall_health$`Pt ID`
Appt_Date <- hall_health$`Appt Date`
Appt_Time <- hall_health$`Appt Time`
time_distribution <- table(Appt_Time)
time_distribution
Appt_Type <- hall_health$`Appt Type`
Appt_Status <- hall_health$`Appt Status`
Waiting_Days <- hall_health$`Lead Days`
sex <- hall_health$Sex
age <- hall_health$Age
age <- hall_health$Age
table(sex)
table(age)
table(Appt_Status)
table(Waiting_Days)
hist(Appt_Status)
hist(Waiting_Days)
hist(age)
Appt_Date <- as.Date(hall_health$`Appt Date`)
Appt_Time = hall_health_data[,3]
Appt_Date <- as.Date(hall_health$`Appt Date`)
Appt_Time <- as.Date(hall_health$`Appt Time`)
Appt_Time <- hall_health$`Appt Time`
no_show_ratio = sum(Appt_Status == -1) / length(Appt_Status)
table(Appt_Status[Waiting_Days<=7])
library(dplyr)
colnames(hall_health)
?rename
hall_health <- hall_health %>%
rename(PT_ID = `Pt ID`,
Appt_Date = `Appt Date`,
Appt_Time = `Appt Time`,
Appt_Status = `Appt Status`,
Appt_Type = `Appt Type`,
Waiting_Days  = `Lead Days`)
colnames(hall_health)
View(hall_health)
time_distribution <- table(hall_health$Appt_Time)
time_distribution
# see visualization of the hall health data
table(hall_health$sex)
# see visualization of the hall health data
table(hall_health$Sex)
table(hall_health$Age)
table(hall_health$Appt_Status)
table(hall_health$Waiting_Days)
hall_health <- hall_health %>%
rename(PT_ID = `Pt ID`,
Appt_Date = `Appt Date`,
Appt_Time = `Appt Time`,
Appt_Status = `Appt Status`,
Appt_Type = `Appt Type`,
Waiting_Days  = `Lead Days`) %>%
mutate(Appt_Date = as.Date(Appt_Date))
mutate(hall_health, Appt_Date = as.Date(Appt_Date))
time_distribution <- table(hall_health$Appt_Time)
hist(hall_health$Appt_Status)
hist(hall_health$Waiting_Days)
hist(hall_health$Age)
# set the no show ratio
no_show_ratio = sum(hall_health$Appt_Status == -1) / length(hall_health$Appt_Status)
# function to create no show/show based on given waiting days
# min: minimum waiting day, max: maximum waiting day
appt_status_days <- function(min, max) {
temp <- hall_health %>%
filter(Waiting_Days <= max, Waiting_Days > min) %>%
select(Appt_Status)
table(temp)
}
appt_status_days(0, 7)
table(Appt_Status[Waiting_Days > 28])
appt_status_days(28, 100)
appt_status_days(28, 1000)
table(hall_health$Appt_Status[sex == "Female"])
table(hall_health$Appt_Status[sex == "Male"])
# no show/show based on age
appt_status_age <- function(min, max) {
temp <- hall_health %>%
filter(Age <= max, Age > min) %>%
select(Appt_Status)
table(temp)
}
table(Appt_Status[age < 23])
appt_status_age(0, 23)
# no show/show based on age
appt_status_age <- function(min, max) {
temp <- hall_health %>%
filter(Age < max, Age >= min) %>%
select(Appt_Status)
table(temp)
}
appt_status_age(0, 23)
# grad students (or mid 20s)
appt_status_age(23, 27)
table(Appt_Status[age >= 23 & age < 27])
# grad students (or late 20s to early 30s)
appt_status_age(27, 32)
table(Appt_Status[age >= 27 & age < 32])
# late grad students and professors and other alumni
appt_status_age(32, 100)
table(Appt_Status[age >= 32])
# mainly due to weird time handling on  Excel
times<-c("1899-12-30 07:30:00", "1899-12-30 08:00:00","1899-12-30 08:30:00","1899-12-30 09:00:00", "1899-12-30 09:30:00","1899-12-30 10:00:00", "1899-12-30 10:30:00","1899-12-30 11:00:00","1899-12-30 11:30:00","1899-12-30 12:00:00","1899-12-30 12:30:00","1899-12-30 13:00:00","1899-12-30 13:30:00","1899-12-30 14:00:00","1899-12-30 14:30:00","1899-12-30 15:00:00","1899-12-30 15:30:00","1899-12-30 16:00:00","1899-12-30 16:30:00","1899-12-30 17:00:00","1899-12-30 17:30:00")
no_show_time = 1:21
show_time = 1:21
x = 1:21
no_show_time[1] = no_show_time[21] = 0
show_time[1] = table(hall_health$Appt_Status[Appt_Time == times[1]])[1]
show_time
show_time[1] = table(Appt_Status[Appt_Time == times[1]])[1]
show_time
table(Appt_Status[Appt_Time == times[1]])[1]
table(Appt_Status[Appt_Time == times[1]])
times
data.class(hall_health$Appt_Time)
mutate(hall_health, Appt_Date = as.Date(Appt_Date), Appt_Time = toString(Appt_Time))
Appt_Time
mutate(hall_health, Appt_Date = as.Date(Appt_Date), Appt_Time = toString(Appt_Time))
table(Appt_Status[Appt_Time == times[1]])[1]
times <- paste(times, "UTC")
times
table(Appt_Status[Appt_Time == times[1]])[1]
table(Appt_Status[Appt_Time == times[1]])
Appt_Time[1]
# mainly due to weird time handling on  Excel
times<-c("1899-12-31 07:30:00", "1899-12-31 08:00:00","1899-12-31 08:30:00","1899-12-31 09:00:00", "1899-12-31 09:30:00","1899-12-31 10:00:00", "1899-12-31 10:30:00","1899-12-31 11:00:00","1899-12-31 11:30:00","1899-12-31 12:00:00","1899-12-31 12:30:00","1899-12-31 13:00:00","1899-12-31 13:30:00","1899-12-31 14:00:00","1899-12-31 14:30:00","1899-12-31 15:00:00","1899-12-31 15:30:00","1899-12-31 16:00:00","1899-12-31 16:30:00","1899-12-31 17:00:00","1899-12-31 17:30:00")
times <- paste(times, "UTC")
table(Appt_Status[Appt_Time == times[1]])[1]
table(Appt_Status[Appt_Time == times[1]])
table(Appt_Status[Appt_Time == times[14]])
table(Appt_Status[Appt_Time == times[10]])
table(Appt_Status[Appt_Time == times[2]])
table(Appt_Status[Appt_Time == times[3]])
table(Appt_Status[Appt_Time == times[4]])
table(Appt_Status[Appt_Time == times[5]])
table(Appt_Status[Appt_Time == times[6]])
table(Appt_Status[Appt_Time == times[7]])
times[6]
table(hall_health$Appt_Time)
table(Appt_Status[Appt_Time == "1899-12-31 10:00:00"])
table(Appt_Status[Appt_Time == times[6]])
table(hall_health$Appt_Status[hall_health$Appt_Time == times[6]])
show_time[1] = table(filter(hall_health, Appt_Time == times[1]) %>%
select(Appt_Status))[3]
show_time
data.class(hall_health$Appt_Time)
mutate(hall_health, Appt_Date = as.Date(Appt_Date), Appt_Time = toString(Appt_Time))
data.class(hall_health$Appt_Time)
mutate(hall_health, Appt_Date = as.Date(Appt_Date), Appt_Time = as.character(Appt_Time))
data.class(hall_health$Appt_Time)
view(hall_health$Appt_Time)
View(hall_health$Appt_Time)
# mainly due to weird time handling on  Excel
times<-c("1899-12-31 07:30:00", "1899-12-31 08:00:00","1899-12-31 08:30:00","1899-12-31 09:00:00", "1899-12-31 09:30:00","1899-12-31 10:00:00", "1899-12-31 10:30:00","1899-12-31 11:00:00","1899-12-31 11:30:00","1899-12-31 12:00:00","1899-12-31 12:30:00","1899-12-31 13:00:00","1899-12-31 13:30:00","1899-12-31 14:00:00","1899-12-31 14:30:00","1899-12-31 15:00:00","1899-12-31 15:30:00","1899-12-31 16:00:00","1899-12-31 16:30:00","1899-12-31 17:00:00","1899-12-31 17:30:00")
show_time[1] = table(filter(hall_health, Appt_Time == times[1]) %>%
select(Appt_Status))
show_time[1] = table(filter(hall_health, Appt_Time == times[1]) %>%
select(Appt_Status))[3]
show_time
show_time = 1:21
show_time[1] = table(filter(hall_health, Appt_Time == times[1]) %>%
select(Appt_Status))[3]
show_time = 1:21
show_time[1] = table(filter(hall_health, Appt_Time == times[1]) %>%
select(Appt_Status))[3]
show_time
table(filter(hall_health, Appt_Time == times[1]) %>%
select(Appt_Status))
table(filter(hall_health, Appt_Time == times[7]) %>%
select(Appt_Status))
times[7]
table(Appt_Time)
table(hall_health$Appt_Time)
table(filter(hall_health, Appt_Time == times[1])$Appt_Time)
times[1]
# mainly due to weird time handling on  Excel
times<-c("1899-12-31 08:00:00","1899-12-31 08:30:00","1899-12-31 09:00:00", "1899-12-31 09:30:00","1899-12-31 10:00:00", "1899-12-31 10:30:00","1899-12-31 11:00:00","1899-12-31 11:30:00","1899-12-31 12:00:00","1899-12-31 12:30:00","1899-12-31 13:00:00","1899-12-31 13:30:00","1899-12-31 14:00:00","1899-12-31 14:30:00","1899-12-31 15:00:00","1899-12-31 15:30:00","1899-12-31 16:00:00","1899-12-31 16:30:00","1899-12-31 17:00:00")
table(filter(hall_health, Appt_Time == times[1])$Appt_Time)
times<-c("1899-12-31 00:00:00","1899-12-31 00:30:00","1899-12-31 01:00:00", "1899-12-31 01:30:00","1899-12-31 02:00:00", "1899-12-31 02:30:00","1899-12-31 03:00:00","1899-12-31 03:30:00","1899-12-31 04:00:00","1899-12-31 04:30:00","1899-12-31 05:00:00","1899-12-31 05:30:00","1899-12-31 06:00:00","1899-12-31 06:30:00","1899-12-31 07:00:00","1899-12-31 07:30:00","1899-12-31 08:00:00","1899-12-31 08:30:00","1899-12-31 09:00:00")
table(filter(hall_health, Appt_Time == times[1])$Appt_Time)
no_show_time = 1:21
show_time = 1:21
x = 1:21
no_show_time[1] = no_show_time[21] = 0
for (i in 1:19) {
temp_table <- table(filter(hall_health, Appt_Time == times[i]) %>%
select(Appt_Status))
show_time[i] <- temp_table[3]
no_show_time[i] <- temp_table[1]
}
plot(no_show_time[1:19], type = "b", ylim = c(0, 1200))
plot(no_show_time, type = "b", ylim = c(0, 1200))
lines(show_time, type = "b", col = "red")
plot(x, type = "b")
for (i in 1:21) {
x[i] <- no_show_time[i] / (no_show_time[i] + show_time[i])
}
no_show_time = 1:19
show_time = 1:19
x = 1:19
for (i in 1:19) {
temp_table <- table(filter(hall_health, Appt_Time == times[i]) %>%
select(Appt_Status))
show_time[i] <- temp_table[3]
no_show_time[i] <- temp_table[1]
x[i] <- no_show_time[i] / (no_show_time[i] + show_time[i])
}
plot(x, type = "b")
sum(no_show_time[1:5]) / (sum(no_show_time[1:5]) + sum(show_time[1:5]))
sum(no_show_time[6:19]) / (sum(no_show_time[6:19]) + sum(show_time[6:19]))
uniqueness1 <- table(PT_ID)
uniqueness1
number <- table(uniqueness1)
number
uniqueness1 <- table(hall_health$PT_ID)
number <- table(uniqueness1)
uniqueness2 <- table(hall_health$PT_ID[Appt_Status == -1])
no_show_numbers <- table(uniqueness2)
no_show_numbers
no_show_no_return = 0
good_patients = 0
repeated_patients = 0
one_time_patients = 0
one_missing_patients = 0
for (b in unique(PT_ID)) {
a = toString(b)
array = uniqueness1[a]
if (array == 1) {
if (hall_health$Appt_Status[PT_ID == a] == -1) {
no_show_no_return = no_show_no_return + 1
} else {
one_time_patients = one_time_patients + 1
}
}
else if (array > 1) {
numb = sum(Appt_Status[PT_ID == a] == -1)
if (numb  == 0) {
good_patients = good_patients + 1
} else if (numb == 1) {
one_missing_patients = one_missing_patients + 1
} else {
repeated_patients = repeated_patients + 1
}
}
}
number
no_show_no_return + one_time_patients
good_patients
repeated_patients
one_missing_patients
length(unique(PT_ID))
length(unique(hall_health$PT_ID))
length(unique(hall_health$PT_ID))
length(hall_health$PT_ID[hall_health$Appt_Status == -1])
length(unique(hall_health$PT_ID[hall_health$Appt_Status == -1]))
plot(number)
mean(table(hall_health$Appt_Date))
sd(table(hall_health$Appt_Date))
dates = sort(unique(hall_health$Appt_Date))
total_show_data = matrix(0, 21, length(dates))
total_no_show_data = matrix(0, 21, length(dates))
curr_date = 1
for (day in dates) {
for (time in 1:21) {
data_date_time = hall_health$Appt_Status[hall_health$Appt_Date == day & hall_health$Appt_Time == times[time]]
no_show_date_time = 0
show_date_time = 0
if (length(data_date_time) > 0) {
no_show_date_time = sum(data_date_time == -1)
show_date_time = sum(data_date_time == 1)
}
total_show_data[time, curr_date] = show_date_time
total_no_show_data[time, curr_date] = no_show_date_time
}
curr_date = curr_date + 1
}
total_percentage = total_no_show_data / (total_no_show_data + total_show_data)
total_percentage
means_no_show_hours = 1:21
means_show_hours = 1:21
for (i in 1:21) {
means_no_show_hours[i] = mean(total_no_show_data[i,])
means_show_hours[i] = mean(total_show_data[i,])
}
plot(means_no_show_hours, type = "b", ylim = c(0,4))
lines(means_show_hours, type = "b", col = 2)
means_percentage_hours = means_no_show_hours / (means_no_show_hours + means_show_hours)
plot(means_percentage_hours, type = "b", ylim = c(0.2, 0.3))
plot(means_percentage_hours, type = "b")
means_no_show_days = 1:273
means_show_days = 1:273
for (i in 1:273) {
means_no_show_days[i] = mean(total_no_show_data[2:20,i])
means_show_days[i] = mean(total_show_data[2:20,i])
}
# find the days-based average no show rate
means_no_show_days = 1:273
means_show_days = 1:273
for (i in 1:273) {
means_no_show_days[i] = mean(total_no_show_data[2:20,i])
means_show_days[i] = mean(total_show_data[2:20,i])
}
plot(means_no_show_days, type = "l", ylim = c(0,4))
lines(means_show_days, type = "l", col = 2)
plot(means_no_show_days, type = "l")
table(means_no_show_days)
means_no_show_days
total_show_data = matrix(1, 19, length(dates))
total_show_data = matrix(0, 19, length(dates))
total_no_show_data = matrix(0, 19, length(dates))
curr_date = 1
for (day in dates) {
for (time in 1:19) {
data_date_time = hall_health$Appt_Status[hall_health$Appt_Date == day & hall_health$Appt_Time == times[time]]
no_show_date_time = 0
show_date_time = 0
if (length(data_date_time) > 0) {
no_show_date_time = sum(data_date_time == -1)
show_date_time = sum(data_date_time == 1)
}
total_show_data[time, curr_date] = show_date_time
total_no_show_data[time, curr_date] = no_show_date_time
}
curr_date = curr_date + 1
}
total_percentage = total_no_show_data / (total_no_show_data + total_show_data)
# find the hours-based average no show rate
means_no_show_hours = 1:21
means_show_hours = 1:21
for (i in 1:21) {
means_no_show_hours[i] = mean(total_no_show_data[i,])
means_show_hours[i] = mean(total_show_data[i,])
}
# find the hours-based average no show rate
means_no_show_hours = 1:19
means_show_hours = 1:19
for (i in 1:19) {
means_no_show_hours[i] = mean(total_no_show_data[i,])
means_show_hours[i] = mean(total_show_data[i,])
}
plot(means_no_show_hours, type = "b", ylim = c(0,4))
plot(means_no_show_hours, type = "b")
, col = 2
lines(means_show_hours, type = "b", col = 2)
plot(means_no_show_hours, type = "b", ylim = c(0,4))
lines(means_show_hours, type = "b", col = 2)
means_percentage_hours = means_no_show_hours / (means_no_show_hours + means_show_hours)
plot(means_percentage_hours, type = "b")
# find the days-based average no show rate
means_no_show_days = 1:273
means_show_days = 1:273
for (i in 1:273) {
means_no_show_days[i] = mean(total_no_show_data[1:19,i])
means_show_days[i] = mean(total_show_data[1:19,i])
}
plot(means_no_show_days, type = "l")
lines(means_show_days, type = "l", col = 2)
plot(means_no_show_days, type = "l", ylim = c(0,4))
lines(means_show_days, type = "l", col = 2)
means_percentage_days = means_no_show_days / (means_no_show_days + means_show_days)
plot(means_percentage_days, type = "l")
abline(no_show_ratio, 0, col = 2)
abline(no_show_ratio + sd(means_percentage_days), 0, col = 3)
abline(no_show_ratio - sd(means_percentage_days), 0, col = 4)
stand = sd(means_percentage_days)
stand
means_no_show_peak = 1:273
means_show_peak = 1:273
means_no_show_non = 1:273
means_show_non = 1:273
for (i in 1:273) {
means_no_show_peak[i] = mean(total_no_show_data[1:5,i])
means_show_peak[i] = mean(total_show_data[1:5,i])
means_no_show_non[i] = mean(total_no_show_data[6:19,i])
means_show_non[i] = mean(total_show_data[6:19,i])
}
means_percentage_peak = means_no_show_peak / (means_no_show_peak + means_show_peak)
means_percentage_non = means_no_show_non / (means_no_show_non + means_show_non)
peak_mean = mean(means_percentage_peak, na.rm=TRUE)
non_mean = mean(means_percentage_non, na.rm=TRUE)
plot(means_percentage_peak, type = "l")
lines(means_percentage_non, type = "l", col = 2)
abline(peak_mean, 0, col = 3)
abline(non_mean, 0, col = 4)
# compare the data between the no show rates before the fee introduced and after
uniqueness_fee <- table(hall_health$PT_ID[hall_health$Appt_Date %in% dates[235:273]])
number_fee <- table(uniqueness_fee)
uniqueness2_fee <- table(hall_health$PT_ID[hall_health$Appt_Date %in% dates[235:273] & hall_health$Appt_Status == -1])
no_show_numbers_fee <- table(uniqueness2_fee)
no_show_no_return_fee = 0
good_patients_fee = 0
repeated_patients_fee = 0
one_time_patients_fee = 0
one_missing_patients_fee = 0
for (b in unique(hall_health$PT_ID[hall_health$Appt_Date %in% dates[235:273]])) {
a = toString(b)
array = uniqueness_fee[a]
if (array == 1) {
if (Appt_Status[PT_ID == a & Appt_Date %in% dates[235:273]] == -1) {
no_show_no_return_fee = no_show_no_return_fee + 1
} else {
one_time_patients_fee = one_time_patients_fee + 1
}
}
else if (array > 1) {
numb = sum(Appt_Status[PT_ID == a & Appt_Date %in% dates[235:273]] == -1)
if (numb  == 0) {
good_patients_fee = good_patients_fee + 1
} else if (numb == 1) {
one_missing_patients_fee = one_missing_patients_fee + 1
} else {
repeated_patients_fee = repeated_patients_fee + 1
}
}
}
for (b in unique(hall_health$PT_ID[hall_health$Appt_Date %in% dates[235:273]])) {
a = toString(b)
array = uniqueness_fee[a]
if (array == 1) {
if (hall_health$Appt_Status[hall_health$PT_ID == a & hall_health$Appt_Date %in% dates[235:273]] == -1) {
no_show_no_return_fee = no_show_no_return_fee + 1
} else {
one_time_patients_fee = one_time_patients_fee + 1
}
}
else if (array > 1) {
numb = sum(hall_health$Appt_Status[PT_ID == a & hall_health$Appt_Date %in% dates[235:273]] == -1)
if (numb  == 0) {
good_patients_fee = good_patients_fee + 1
} else if (numb == 1) {
one_missing_patients_fee = one_missing_patients_fee + 1
} else {
repeated_patients_fee = repeated_patients_fee + 1
}
}
}
number_fee
no_show_no_return_fee + one_time_patients_fee
good_patients_fee
repeated_patients_fee
one_missing_patients_fee
# compare the no show rate data after the fee introduced with the ones before
uniqueness_fee_before <- table(hall_health$PT_ID[hall_health$Appt_Date %in% dates[1:234]])
number_fee_before <- table(uniqueness_fee_before)
uniqueness2_fee_before <- table(hall_health$PT_ID[hall_health$Appt_Date %in% dates[1:234] & hall_health$Appt_Status == -1])
no_show_numbers_fee_before <- table(uniqueness2_fee_before)
no_show_no_return_fee_before = 0
good_patients_fee_before = 0
repeated_patients_fee_before = 0
one_time_patients_fee_before = 0
one_missing_patients_fee_before = 0
for (b in unique(hall_health$PT_ID[hall_health$Appt_Date %in% dates[1:234]])) {
a = toString(b)
array = uniqueness_fee_before[a]
if (array == 1) {
if (hall_health$Appt_Status[hall_health$PT_ID == a & hall_health$Appt_Date %in% dates[1:234]] == -1) {
no_show_no_return_fee_before = no_show_no_return_fee_before + 1
} else {
one_time_patients_fee_before = one_time_patients_fee_before + 1
}
}
else if (array > 1) {
numb = sum(hall_health$Appt_Status[hall_health$PT_ID == a & hall_health$Appt_Date %in% dates[1:234]] == -1)
if (numb  == 0) {
good_patients_fee_before = good_patients_fee_before + 1
} else if (numb == 1) {
one_missing_patients_fee_before = one_missing_patients_fee_before + 1
} else {
repeated_patients_fee_before = repeated_patients_fee_before + 1
}
}
}
number_fee_before
no_show_no_return_fee_before + one_time_patients_fee_before
good_patients_fee_before
repeated_patients_fee_before
one_missing_patients_fee_before
total_data <- total_no_show_data + total_show_data
max(total_data)
hist(Waiting_Days, breaks = 100)
sd(table(Appt_Date[Appt_Time <= times[10]]))
sd(table(Appt_Date[Appt_Time > times[10]]))
hist(Appt_Date[Appt_Time <= times[10]], breaks = 100)
hist(Appt_Date[Appt_Time > times[10]], breaks = 100)
table(Appt_Time[Appt_Time <= times[10]])
table(Appt_Time[Appt_Time > times[10]])
table(Appt_Status[Appt_Date > dates[235]])
table(Appt_Status)
sd(table(hall_health$Appt_Date[hall_health$Appt_Time <= times[10]]))
sd(table(hall_health$Appt_Date[hall_health$Appt_Time > times[10]]))
hist(hall_health$Appt_Date[hall_health$Appt_Time <= times[10]], breaks = 100)
hist(hall_health$Appt_Date[hall_health$Appt_Time > times[10]], breaks = 100)
table(hall_health$Appt_Time[hall_health$Appt_Time <= times[10]])
table(hall_health$Appt_Time[hall_health$Appt_Time > times[10]])
table(hall_health$Appt_Status[hall_health$Appt_Date > dates[235]])
table(hall_health$Appt_Status)
